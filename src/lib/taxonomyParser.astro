---
import { getSinglePage } from "@/lib/contentParser.astro";
import { slugify } from "@/lib/utils/textConverter";

// get taxonomy from frontmatter
export const getTaxonomy = async (collection: any, name: string) => {
  const singlePages = await getSinglePage(collection);
  const taxonomyPages = singlePages.map((page: any) => page.data[name]);
  let taxonomies: string[] = [];
  for (let i = 0; i < taxonomyPages.length; i++) {
    const taxonomyData = taxonomyPages[i];
    if (!taxonomyData) continue;
    
    // Handle both array format (old) and string format (new Keystatic)
    if (Array.isArray(taxonomyData)) {
      for (let j = 0; j < taxonomyData.length; j++) {
        taxonomies.push(slugify(taxonomyData[j]));
      }
    } else if (typeof taxonomyData === 'string') {
      // Handle CSV format for tags or single category
      const items = taxonomyData.split(',').map(item => item.trim()).filter(item => item);
      items.forEach(item => taxonomies.push(slugify(item)));
    }
  }
  const taxonomy = [...new Set(taxonomies)];
  return taxonomy;
};

// get all taxonomies from frontmatter
export const getAllTaxonomy = async (collection: any, name: string) => {
  const singlePages = await getSinglePage(collection);
  const taxonomyPages = singlePages.map((page: any) => page.data[name]);
  let taxonomies: string[] = [];
  for (let i = 0; i < taxonomyPages.length; i++) {
    const taxonomyData = taxonomyPages[i];
    if (!taxonomyData) continue;
    
    // Handle both array format (old) and string format (new Keystatic)
    if (Array.isArray(taxonomyData)) {
      for (let j = 0; j < taxonomyData.length; j++) {
        taxonomies.push(slugify(taxonomyData[j]));
      }
    } else if (typeof taxonomyData === 'string') {
      // Handle CSV format for tags or single category
      const items = taxonomyData.split(',').map(item => item.trim()).filter(item => item);
      items.forEach(item => taxonomies.push(slugify(item)));
    }
  }
  return taxonomies;
};
---
